step "calculate-deployment-mode" {
    name = "Calculate Deployment Mode"

    action {
        notes = <<-EOT
                **Always Runs**
                
                Determines if the deployment is a deployment, a rollback, or a redeployment.
            EOT
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Template.Id = "ActionTemplates-21"
            Octopus.Action.Template.Version = "5"
        }
        worker_pool_variable = ""
    }
}

step "check-trident-database" {
    condition = "Variable"
    name = "Check Trident Database"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Project.Database.RunOnDeploy}#{/unless}"
    }

    action {
        notes = <<-EOT
                **Runs on Deployments Only**
                
                Runs the runbook to create the trident database on the current environment's infrastructure.  This can run multiple times, as it checks to see if the database already exists.
            EOT
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-43"
            Octopus.Action.Template.Version = "14"
            Run.Runbook.Api.Key = "#{SQL.Runbook.Api.Key}"
            Run.Runbook.AutoApproveManualInterventions = "No"
            Run.Runbook.Base.Url = "https://samples.octopusdemos.app"
            Run.Runbook.CancelInSeconds = "1800"
            Run.Runbook.DateTime = "N/A"
            Run.Runbook.Environment.Name = "#{Octopus.Environment.Name}"
            Run.Runbook.Machines = "N/A"
            Run.Runbook.ManualIntervention.EnvironmentToUse = "#{Octopus.Environment.Name}"
            Run.Runbook.Name = "Prep Trident Database"
            Run.Runbook.Project.Name = "Trident"
            Run.Runbook.Space.Name = "#{Octopus.Space.Name}"
            Run.Runbook.UsePublishedSnapShot = "True"
            Run.Runbook.Waitforfinish = "True"
        }
        worker_pool = "default-worker-pool"
    }
}

step "generate-database-delta-report" {
    condition = "Variable"
    name = "Generate Database Delta Report"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Project.Database.RunOnDeploy}#{/unless}"
    }

    action {
        action_type = "Octopus.Script"
        notes = <<-EOT
                **Runs on Deployments Only**
                
                Step that will generate a delta script report that can be downloaded by the DBAs during the manual intervention step.
            EOT
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                $packagePath = $OctopusParameters["Octopus.Action.Package[Trident.Database].ExtractedPath"]
                $connectionString = $OctopusParameters["Project.Connection.String"]
                $environmentName = $OctopusParameters["Octopus.Environment.Name"]
                $reportPath = $OctopusParameters["Project.Database.Report.Path"]
                
                cd $packagePath
                $appToRun = ".\Octopus.Trident.Database.DbUp"
                $generatedReport = "$reportPath\UpgradeReport.html"
                
                & $appToRun --ConnectionString="$connectionString" --PreviewReportPath="$reportPath"
                
                New-OctopusArtifact -Path "$generatedReport" -Name "$environmentName.UpgradeReport.html"
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "default-worker-pool"

        packages "Trident.Database" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "Trident.Database"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "auto-approve-database-delta-script" {
    condition = "Variable"
    name = "Auto-Approve Database Delta Script"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Project.Database.RunOnDeploy}#{/unless}"
    }

    action {
        environments = ["staging"]
        notes = <<-EOT
                **Runs on Deployments Only**
                
                Step that will check to see if the delta report has any commands requiring a DBA to approve the changes.
            EOT
        properties = {
            Databases.AutoApproval.ReportPath = "#{Project.Database.Report.Path}\\UpgradeReport.html"
            Databases.AutoApprove.CommandsIndicatingChange = "#{SQL.Verification.Change.List}"
            Databases.AutoApprove.CommandsRequireApproval = "#{SQL.Verification.Command.List}"
            Octopus.Action.Template.Id = "ActionTemplates-22"
            Octopus.Action.Template.Version = "0"
        }
        worker_pool = "default-worker-pool"
    }
}

step "approve-database-delta-script" {
    condition = "Variable"
    name = "Approve Database Delta Script"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if Octopus.Deployment.Error == \"\"}#{Project.Database.ApprovalRequired}#{/if}"
    }

    action {
        action_type = "Octopus.Manual"
        environments = ["staging"]
        notes = <<-EOT
                **Runs on Deployments Only**
                
                Manual intervention, it will pause the deployment and wait until the DBAs have approved the delta report.
            EOT
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "False"
            Octopus.Action.Manual.Instructions = "Please approve the database delta script found in the artifacts section."
            Octopus.Action.Manual.ResponsibleTeamIds = "global/octopus-managers"
            Octopus.Action.RunOnServer = "false"
        }
        worker_pool_variable = ""
    }
}

step "deploy-the-database-changes" {
    condition = "Variable"
    name = "Deploy the database changes"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Project.Database.RunOnDeploy}#{/unless}"
    }

    action {
        action_type = "Octopus.Script"
        notes = <<-EOT
                **Runs on Deployments Only**
                
                Step to deploy the actual database changes to SQL Server.
            EOT
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                $packagePath = $OctopusParameters["Octopus.Action.Package[Trident.Database].ExtractedPath"]
                $connectionString = $OctopusParameters["Project.Connection.String"]
                
                cd $packagePath
                $appToRun = ".\Octopus.Trident.Database.DbUp"
                
                & $appToRun --ConnectionString="$connectionString"
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "default-worker-pool"

        packages "Trident.Database" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "Trident.Database"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "deploy-trident-web" {
    name = "Deploy Trident Web"
    properties = {
        Octopus.Action.TargetRoles = "trident-web"
    }

    action {
        action_type = "Octopus.TentaclePackage"
        notes = <<-EOT
                **Always runs**
                
                Step to deploy the code and replace the specific configuration values in the appSettings.json file.
            EOT
        properties = {
            Octopus.Action.EnabledFeatures = "Octopus.Features.JsonConfigurationVariables"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "octopus-server-built-in"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "appsettings.json"
            Octopus.Action.Package.PackageId = "Trident.Web"
            Octopus.Action.RunOnServer = "false"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "Trident.Web"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "verify-application" {
    name = "Verify Application"

    action {
        action_type = "Octopus.Script"
        notes = <<-EOT
                **Always Runs**
                
                This step will run a series of tests to ensure the application is running correctly.  If it fails, the guided failure mode will run, where you can manually override the failure and proceed, retry the tests, or fail the deployment.
            EOT
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                $randomNumber = Get-Random -Minimum 1 -Maximum 1000
                
                Write-Host "The random number is $randomNumber.  If it is above 995, this will fail the step."
                if ($randomNumber -ge 995)
                {
                	Write-Host "An error occurred verifying the application."
                    exit 1
                }
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "default-worker-pool"
    }
}

step "update-load-balancer" {
    name = "Update Load Balancer"

    action {
        action_type = "Octopus.Script"
        notes = <<-EOT
                **Always Runs**
                 
                Updates the load balancer to point to the new code.
            EOT
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                $release = $OctopusParameters["Octopus.Release.Number"]
                
                Write-Highlight "Load balancer has been updated to point to $release version of Trident.Web"
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "default-worker-pool"
    }
}

step "notify-developers-of-status" {
    condition = "Always"
    name = "Notify Developers of Status"

    action {
        action_type = "Octopus.Email"
        notes = <<-EOT
                **Always runs**
                
                Sends a notification message to anyone in the Trident Notifications email group letting them know the status of this deployment.
            EOT
        properties = {
            Octopus.Action.Email.Body = "#{Notification.Body.Text}"
            Octopus.Action.Email.Subject = "#{Notification.Subject.Text}"
            Octopus.Action.Email.ToTeamIds = "trident-notifications"
            Octopus.Action.RunOnServer = "false"
        }
        worker_pool_variable = ""
    }
}

step "notify-everyone-of-failure" {
    condition = "Failure"
    name = "Send Slack on Failure"

    action {
        notes = <<-EOT
                **Always runs on failure**
                
                Sends a slack message to the trident-deployment-notifications channel when a failure occurs.
            EOT
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-1"
            Octopus.Action.Template.Version = "14"
            ssn_Channel = "trident-deployment-notifications"
            ssn_Color = "good"
            ssn_HookUrl = "#{Notification.Slack.Webhook.Url}"
            ssn_IconUrl = "https://octopus.com/content/resources/favicon.png"
            ssn_Message = "#{Notification.Body.Text}"
            ssn_Title = "#{Notification.Subject.Text}"
            ssn_Username = "Octopus Deploy"
        }
        worker_pool = "default-worker-pool"
    }
}