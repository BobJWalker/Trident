step "calculate-deployment-mode" {
    name = "Calculate Deployment Mode"

    action {
        notes = <<-EOT
                **Always Runs**
                
                Determines if the deployment is a deployment, rollback, or redeploy.
                EOT
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-441"
            Octopus.Action.Template.Version = "3"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "configure-database-server" {
    condition = "Variable"
    name = "Configure Infrastructure"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.Action[Calculate Deployment Mode].Output.RunOnDeploy}#{/unless}"
    }

    action {
        notes = <<-EOT
                **Runs on Deployments Only**
                
                Runs a runbook to verify all the required infrastructure exists.  If it doesn't exist, it will create it automatically.
                EOT
        properties = {
            Octopus.Action.AutoRetry.MaximumCount = "3"
            Octopus.Action.ExecutionTimeout.Minutes = "30"
            Octopus.Action.Template.Id = "ActionTemplates-141"
            Octopus.Action.Template.Version = "14"
            OctopusUseBundledTooling = "False"
            Run.Runbook.Api.Key = "#{Project.Runbook.Api.Key}"
            Run.Runbook.AutoApproveManualInterventions = "No"
            Run.Runbook.Base.Url = "#{Octopus.Web.ServerUri}"
            Run.Runbook.CancelInSeconds = "1800"
            Run.Runbook.DateTime = "N/A"
            Run.Runbook.Environment.Name = "#{Octopus.Environment.Name}"
            Run.Runbook.Machines = "N/A"
            Run.Runbook.ManualIntervention.EnvironmentToUse = "#{Octopus.Environment.Name}"
            Run.Runbook.Name = "Configure Application Infrastructure"
            Run.Runbook.Project.Name = "#{Octopus.Project.Name}"
            Run.Runbook.Space.Name = "#{Octopus.Space.Name}"
            Run.Runbook.UsePublishedSnapShot = "True"
            Run.Runbook.Waitforfinish = "True"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "dockerhub"
            image = "#{Project.ExecutionContainer.Flyway}"
        }
    }
}

step "dry-run-database-migrations" {
    condition = "Variable"
    name = "Dry Run And Check Database Changes"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.Action[Calculate Deployment Mode].Output.RunOnDeploy}#{/unless}"
    }

    action {
        environments = ["staging"]
        notes = <<-EOT
                **Runs on Deployments Only**
                
                Runs the `flyway check` command to perform a comparison between an empty database and the destination database.  It will generate an artifact containing what will change and the commands to run.
                EOT
        properties = {
            Flyway.Authentication.Method = "usernamepassword"
            Flyway.Command.BaseLineOnMigrate = "false"
            Flyway.Command.CheckBuildUrl = "#{Project.Flyway.Check.Connection.String}"
            Flyway.Command.Locations = "#{Project.Database.MigrationLocation}"
            Flyway.Command.OutOfOrder = "false"
            Flyway.Command.SkipExecutingMigrations = "false"
            Flyway.Command.Target = "latest"
            Flyway.Command.Value = "check changes"
            Flyway.Database.Check.User = "#{SQLServer.User.Name}"
            Flyway.Database.Check.User.Password = "#{SQLServer.User.Password}"
            Flyway.Database.User = "#{SQLServer.User.Name}"
            Flyway.Database.User.Password = "#{SQLServer.User.Password}"
            Flyway.License.Key = "#{Flyway.Enterprise.License}"
            Flyway.Package.Value = "{\"PackageId\":\"Trident.Database\",\"FeedId\":\"octopus-server-built-in\"}"
            Flyway.Target.Url = "#{Project.Flyway.Connection.String}"
            Octopus.Action.AutoRetry.MaximumCount = "3"
            Octopus.Action.Template.Id = "ActionTemplates-381"
            Octopus.Action.Template.Version = "11"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "dockerhub"
            image = "#{Project.ExecutionContainer.Flyway}"
        }

        packages "Flyway.Package.Value" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "Trident.Database"
            properties = {
                Extract = "True"
                PackageParameterName = "Flyway.Package.Value"
                SelectionMode = "deferred"
            }
        }
    }
}

step "notify-dbas-of-pending-approval" {
    condition = "Variable"
    name = "Notify DBAs of Pending Changes"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.Action[Calculate Deployment Mode].Output.RunOnDeploy}#{/unless}"
    }

    action {
        environments = ["staging"]
        notes = <<-EOT
                **Runs on Deployments Only when not triggered by a scheduled trigger**
                
                Notifies the DBA of a pending changes so they can review them prior to the migration running. 
                EOT
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-101"
            Octopus.Action.Template.Version = "15"
            OctopusUseBundledTooling = "False"
            ssn_Channel = "trident-approvals"
            ssn_Color = "warning"
            ssn_HookUrl = "#{Notification.Slack.Webhook.Url}"
            ssn_IconUrl = "https://octopus.com/content/resources/favicon.png"
            ssn_Message = "#{Notification.Body.Text}"
            ssn_Title = "#{Notification.ManualIntervention.Subject.Text}"
            ssn_Username = "Octopus Deploy"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "dockerhub"
            image = "#{Project.ExecutionContainer.Flyway}"
        }
    }
}

step "dba-review-migration" {
    condition = "Variable"
    name = "DBA Review Migration"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.Action[Calculate Deployment Mode].Output.RunOnDeploy}#{/unless}"
    }
    start_trigger = "StartWithPrevious"

    action {
        action_type = "Octopus.Manual"
        environments = ["staging"]
        notes = <<-EOT
                **Runs on Deployments Only when not triggered by a scheduled trigger**
                
                Pauses the deployment so the DBA can review the migration report.  
                EOT
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "False"
            Octopus.Action.Manual.Instructions = "Please review the migration report generated by Flyway"
            Octopus.Action.Manual.ResponsibleTeamIds = "global/octopus-managers"
            Octopus.Action.RunOnServer = "false"
        }
    }
}

step "deploy-trident-database" {
    condition = "Variable"
    name = "Deploy Trident Database"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.Action[Calculate Deployment Mode].Output.RunOnDeploy}#{/unless}"
    }

    action {
        notes = <<-EOT
                **Runs on Deployments Only**
                
                When doing a deployment it will run the `migrate` command.
                EOT
        properties = {
            Flyway.Authentication.Method = "usernamepassword"
            Flyway.Command.BaseLineOnMigrate = "false"
            Flyway.Command.Locations = "#{Project.Database.MigrationLocation}"
            Flyway.Command.OutOfOrder = "false"
            Flyway.Command.SkipExecutingMigrations = "false"
            Flyway.Command.Target = "latest"
            Flyway.Command.Value = "migrate"
            Flyway.License.Key = "#{Flyway.Enterprise.License}"
            Flyway.Package.Value = "{\"PackageId\":\"Trident.Database\",\"FeedId\":\"octopus-server-built-in\"}"
            Flyway.Target.Url = "#{Project.Flyway.Connection.String}"
            Octopus.Action.AutoRetry.MaximumCount = "3"
            Octopus.Action.Template.Id = "ActionTemplates-381"
            Octopus.Action.Template.Version = "11"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "dockerhub"
            image = "#{Project.ExecutionContainer.Flyway}"
        }

        packages "Flyway.Package.Value" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "Trident.Database"
            properties = {
                Extract = "True"
                PackageParameterName = "Flyway.Package.Value"
                SelectionMode = "deferred"
            }
        }
    }
}

step "deploy-connection-string-secret" {
    name = "Deploy Connection String Secret"
    properties = {
        Octopus.Action.TargetRoles = "trident-web"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        notes = <<-EOT
                **Always Runs**
                
                Ensures the connection string secret is up to date with the encrypted value from Octopus.
                EOT
        properties = {
            Octopus.Action.GitRepository.FilePathFilters = "k8s\\base\\trident-app-secrets.yaml"
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "k8s\\base\\trident-app-secrets.yaml"
            Octopus.Action.KubernetesContainers.Namespace = "#{Project.K8s.Namespace}"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "**/*.{yml,yaml}"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "dockerhub"
            image = "#{Project.ExecutionContainer.K8s}"
        }
    }
}

step "deploy-website-via-kustomize" {
    name = "Deploy Website via Kustomize"
    properties = {
        Octopus.Action.TargetRoles = "trident-web"
    }

    action {
        action_type = "Octopus.Kubernetes.Kustomize"
        notes = <<-EOT
                **Always Runs**
                
                Deploys the website container to the Kubernetes Cluster using a manifest file.
                EOT
        properties = {
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.Kustomize.OverlayPath = "k8s/overlays/#{Octopus.Environment.Name | toLower}"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            Octopus.Action.SubstituteInFiles.TargetFiles = "k8s/base/kustomization.yaml"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "dockerhub"
            image = "#{Project.ExecutionContainer.K8s}"
        }

        packages "trident" {
            acquisition_location = "NotAcquired"
            feed = "dockerhub"
            package_id = "bobjwalker99/trident"
            properties = {
                Extract = "False"
                Purpose = "DockerImageReference"
                SelectionMode = "immediate"
            }
        }
    }
}

step "verify-successful-deployment" {
    name = "Verify successful deployment"

    action {
        action_type = "Octopus.Script"
        notes = <<-EOT
                **Always runs**
                
                Runs a series of tests to ensure the deployment was successful.
                EOT
        properties = {
            Octopus.Action.Script.ScriptBody = "Write-Highlight \"Verification was successful!\""
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "update-load-balancer" {
    name = "Update Load Balancer"

    action {
        action_type = "Octopus.Script"
        notes = <<-EOT
                **Always Runs**
                
                When the verification is successful, the script will update the load balancer to point to the new version of the application. 
                EOT
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                Write-Host "Updating Load Balancer"
                Write-Host "Load Balancer SUccessfully Updated"
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "notify-team-of-deployment-status" {
    condition = "Always"
    name = "Notify Team of Deployment Status"

    action {
        channels = ["release"]
        notes = <<-EOT
                **Always Runs**
                
                Notifies the team of the deployment status of the application.
                EOT
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-101"
            Octopus.Action.Template.Version = "15"
            OctopusUseBundledTooling = "False"
            ssn_Channel = "trident-status"
            ssn_Color = "#{unless Octopus.Deployment.Error}good#{else}danger#{/unless}"
            ssn_HookUrl = "#{Notification.Slack.Webhook.Url}"
            ssn_IconUrl = "https://octopus.com/content/resources/favicon.png"
            ssn_Message = "#{Notification.Body.Text}"
            ssn_Title = "#{Notification.DeploymentStatus.Subject.Text}"
            ssn_Username = "Octopus Deploy"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "dockerhub"
            image = "#{Project.ExecutionContainer.Flyway}"
        }
    }
}