step "azure-key-vault-retrieve-secrets" {
    name = "Azure Key Vault - Retrieve Secrets"

    action {
        notes = <<-EOT
                **Always Runs**
                
                Pulls the database credentials from Azure Key Vault for database and code deployment steps to use.
                EOT
        properties = {
            Azure.KeyVault.RetrieveSecrets.Account = "Project.Azure.Account"
            Azure.KeyVault.RetrieveSecrets.PrintVariableNames = "False"
            Azure.KeyVault.RetrieveSecrets.VaultName = "#{Project.Azure.KeyVault.Name}"
            Azure.KeyVault.RetrieveSecrets.VaultSecrets = "#{Project.Azure.KeyVault.Secrets}"
            Octopus.Action.Template.Id = "ActionTemplates-561"
            Octopus.Action.Template.Version = "2"
        }
        worker_pool_variable = "Standards.Worker.Pool"

        container {
            feed = "dockerhub"
            image = "#{Standards.Azure.ExecutionContainer}"
        }
    }
}

process_template "verify-build-artifacts" {
    name = "Verify Build Artifacts"
    process_template_slug = "deploy-process-verify-build-artifacts"
    version_mask = "X"

    parameter "Template.Artifacts" {
        value = <<-EOT
                bobjwalker99/trident:#{Octopus.Action[Deploy Trident Website].Package[Trident].PackageVersion}
                Trident.Database.DbUp:#{Octopus.Action[Deploy Databases-Deploy Database Changes].Package[Template.Database.Package].PackageVersion}
                EOT
    }

    parameter "Template.Git.AuthToken" {
        value = "#{Project.GitHub.Token}"
    }

    parameter "Template.Verify.WorkerPool" {
        value = "WorkerPools-423"
    }

    parameter "Template.Verify.Environments" {
        value = "Environments-42,Environments-81,Environments-43"
    }
}

step "configure-database-server" {
    name = "Configure Infrastructure"

    action {
        notes = <<-EOT
                **Always Runs**
                
                Runs a runbook to verify the database and namespace application / environment exists.  If it doesn't exist, it will create it automatically.
                EOT
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-141"
            Octopus.Action.Template.Version = "17"
            OctopusUseBundledTooling = "False"
            Run.Runbook.Api.Key = "#{Project.Runbook.API.Key}"
            Run.Runbook.AutoApproveManualInterventions = "No"
            Run.Runbook.Base.Url = "#{Octopus.Web.ServerUri}"
            Run.Runbook.CaCBranchName = "#{Octopus.Release.Git.BranchName}"
            Run.Runbook.CancelInSeconds = "1800"
            Run.Runbook.DateTime = "N/A"
            Run.Runbook.Environment.Name = "#{Octopus.Environment.Name}"
            Run.Runbook.Machines = "N/A"
            Run.Runbook.ManualIntervention.EnvironmentToUse = "#{Octopus.Environment.Name}"
            Run.Runbook.Name = "Configure Application Infrastructure"
            Run.Runbook.Project.Name = "#{Octopus.Project.Name}"
            Run.Runbook.Space.Name = "#{Octopus.Space.Name}"
            Run.Runbook.UsePublishedSnapShot = "True"
            Run.Runbook.Waitforfinish = "True"
        }
        worker_pool_variable = "Standards.Worker.Pool"
    }
}

step "deploy-trident-website" {
    name = "Deploy Trident Website"
    properties = {
        Octopus.Action.TargetRoles = "trident-web"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        notes = <<-EOT
                **Always Runs**
                
                Deploys the website container to the Kubernetes Cluster using a manifest file.
                EOT
        properties = {
            Octopus.Action.GitRepository.FilePathFilters = <<-EOT
                k8s/base/trident-app-secrets.yaml
                k8s/base/trident-deployment.yaml
                EOT
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "False"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "False"
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = <<-EOT
                k8s/base/trident-app-secrets.yaml
                k8s/base/trident-deployment.yaml
                EOT
            Octopus.Action.KubernetesContainers.Namespace = "#{Standards.K8s.Namespace}"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "**/*.{yml,yaml}"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "Standards.Worker.Pool"

        packages "Trident" {
            acquisition_location = "NotAcquired"
            feed = "dockerhub"
            package_id = "bobjwalker99/trident"
            properties = {
                Extract = "False"
                Purpose = "DockerImageReference"
                SelectionMode = "immediate"
            }
        }
    }
}

step "verify-deployment" {
    name = "Verify Deployment"

    action {
        action_type = "Octopus.Script"
        notes = <<-EOT
                **Always runs**
                
                Runs a series of tests to ensure the deployment was successful.
                EOT
        properties = {
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Script.ScriptFileName = "scripts/VerifySuccessfulDeployment.ps1"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "Standards.Worker.Pool"
    }
}

step "notify-team-of-deployment-status" {
    condition = "Always"
    name = "Notify Team of Deployment Status"

    action {
        channels = ["release"]
        notes = <<-EOT
                **Always Runs**
                
                Notifies the team of the deployment status of the application.
                EOT
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-101"
            Octopus.Action.Template.Version = "15"
            OctopusUseBundledTooling = "False"
            ssn_Channel = "trident-status"
            ssn_Color = "#{unless Octopus.Deployment.Error}good#{else}danger#{/unless}"
            ssn_HookUrl = "#{Notification.Slack.Webhook.Url}"
            ssn_IconUrl = "https://octopus.com/content/resources/favicon.png"
            ssn_Message = "#{Notification.Body.Text}"
            ssn_Title = "#{Notification.DeploymentStatus.Subject.Text}"
            ssn_Username = "Octopus Deploy"
        }
        worker_pool_variable = "Standards.Worker.Pool"
    }
}