name = "Configure Application Infrastructure"
default_guided_failure_mode = "EnvironmentDefault"
description = <<-EOT
        **Action**: Creates the database if it doesn't exist for the environment.  On Dev it will always ensure a clean database for testing.  Creates the namespace as well as the connection string secret for the environment.
          
          **Affects**: The SQL Server this application is running on.
        EOT

connectivity_policy {
    allow_deployments_to_no_targets = true
}

run_retention_policy {
    quantity_to_keep = 5
}

process {
    step "azure-sql-create-database-if-not-exists" {
        name = "Azure SQL - Create Database Main Database If Not Exists"

        action {
            notes = <<-EOT
                    **Always Runs**
                    
                    Runs a script on the Azure Sql Server to ensure the database exists and is configured as a serverless general purpose database with 1 vCore.
                    EOT
            properties = {
                createCommandTimeout = "600"
                createDatabaseName = "#{Project.Database.Name}"
                createSqlDatabaseRetryAttempts = "0"
                createSqlLoginPasswordWhoHasRights = "#{SQLServer.User.Password}"
                createSqlLoginUserWhoHasCreateUserRights = "#{SQLServer.User.Name}"
                createSqlServer = "#{SQLServer.Server.Name}"
                Octopus.Action.Template.Id = "ActionTemplates-481"
                Octopus.Action.Template.Version = "0"
                OctopusUseBundledTooling = "False"
            }
            worker_pool = "hosted-ubuntu"
        }
    }

    step "run-script-on-primary-database" {
        name = "Run Script on Primary Database"

        action {
            notes = <<-EOT
                    **Always Runs**
                    
                    Runs a script on the primary database to ensure that it is running as the databases are configured to go to sleep after an hour of inactivity.
                    EOT
            properties = {
                Adhoc.Database.Name = "#{Project.Database.Name}"
                Adhoc.Database.Password = "#{SQLServer.User.Password}"
                Adhoc.Database.Script = "Select 1 as Number"
                Adhoc.Database.Server = "#{SQLServer.Server.Name}"
                Adhoc.Database.UserName = "#{SQLServer.User.Name}"
                Octopus.Action.AutoRetry.MaximumCount = "3"
                Octopus.Action.ExecutionTimeout.Minutes = "10"
                Octopus.Action.Template.Id = "ActionTemplates-383"
                Octopus.Action.Template.Version = "0"
                OctopusUseBundledTooling = "False"
            }
            worker_pool = "hosted-ubuntu"
        }
    }

    step "create-tenant-namespace" {
        name = "Create application namespace"
        properties = {
            Octopus.Action.TargetRoles = "trident-web"
        }

        action {
            action_type = "Octopus.KubernetesRunScript"
            notes = <<-EOT
                    **Always Runs**
                    
                    Applies the manifest file to ensure the namespace exists for this particular application.
                    EOT
            properties = {
                Octopus.Action.KubernetesContainers.Namespace = "default"
                Octopus.Action.Script.ScriptBody = <<-EOT
                    $namespace = $OctopusParameters["Project.K8s.Namespace"]
                    
                    kubectl create namespace $namespace --dry-run=client -o yaml | kubectl apply -f -
                    EOT
                Octopus.Action.Script.ScriptSource = "Inline"
                Octopus.Action.Script.Syntax = "PowerShell"
                OctopusUseBundledTooling = "False"
            }
            worker_pool = "azure-aks"
        }
    }

    step "run-verification" {
        name = "Run verification"

        action {
            action_type = "Octopus.Script"
            properties = {
                Octopus.Action.GitRepository.Source = "External"
                Octopus.Action.Script.ScriptFileName = "scripts/VerifySuccessfulDeployment.ps1"
                Octopus.Action.Script.ScriptSource = "GitRepository"
                OctopusUseBundledTooling = "False"
            }
            worker_pool = "hosted-ubuntu"

            git_dependencies {
                default_branch = "main"
                git_credential_id = "GitCredentials-21"
                git_credential_type = "Library"
                repository_uri = "https://github.com/BobJWalker/Trident.git"
            }
        }
    }

    step "notify-team-of-runbook-status" {
        condition = "Always"
        name = "Notify Team of Runbook Status"

        action {
            notes = <<-EOT
                    **Always Runs**
                    
                    Sends a slack message to the teams so they know the status of the runbook run.
                    EOT
            properties = {
                Octopus.Action.Template.Id = "ActionTemplates-101"
                Octopus.Action.Template.Version = "15"
                OctopusUseBundledTooling = "False"
                ssn_Channel = "trident-status"
                ssn_Color = "#{unless Octopus.Deployment.Error}good#{else}danger#{/unless}"
                ssn_HookUrl = "#{Notification.Slack.Webhook.Url}"
                ssn_IconUrl = "https://octopus.com/content/resources/favicon.png"
                ssn_Message = "#{Notification.Body.Text}"
                ssn_Title = "#{Notification.RunbookStatus.Subject.Text}"
                ssn_Username = "Octopus Deploy"
            }
            worker_pool = "hosted-ubuntu"
        }
    }
}