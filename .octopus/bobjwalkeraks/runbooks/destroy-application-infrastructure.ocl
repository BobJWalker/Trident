name = "Destroy Application Infrastructure"
default_guided_failure_mode = "EnvironmentDefault"
description = <<-EOT
        **Action:** Destroys the application's databases and namespace
        
        **Affects:** the SQL Server and the AKS cluster this application is running on.
        EOT
environment_scope = "FromProjectLifecycles"

connectivity_policy {
    allow_deployments_to_no_targets = true
}

run_retention_policy {
    quantity_to_keep = 5
}

process {
    step "azure-key-vault-retrieve-secrets" {
        name = "Azure Key Vault - Retrieve Secrets"

        action {
            notes = <<-EOT
                    **Always Runs**
                    
                    Pulls the SQL Server credentials out of Azure Key Vault
                    EOT
            properties = {
                Azure.KeyVault.RetrieveSecrets.Account = "Project.Azure.Account"
                Azure.KeyVault.RetrieveSecrets.PrintVariableNames = "False"
                Azure.KeyVault.RetrieveSecrets.VaultName = "bobjwalker-vault"
                Azure.KeyVault.RetrieveSecrets.VaultSecrets = "#{Project.Azure.KeyVault.Secrets}"
                Octopus.Action.Template.Id = "ActionTemplates-561"
                Octopus.Action.Template.Version = "2"
            }
            worker_pool_variable = "Standards.Worker.Pool"

            container {
                feed = "dockerhub"
                image = "#{Standards.Azure.ExecutionContainer}"
            }
        }
    }

    step "destroy-k8s-and-sql-infrastructure" {
        name = "Destroy K8s Infrastructure"
        properties = {
            "Octopus.Step[Delete Kubernetes Namespace].Properties[Octopus.Action.TargetRoles]" = "trident-web"
        }

        action {
            action_type = "Octopus.ProcessTemplate"
            properties = {
                Octopus.Action.ProcessTemplate.Reference.Slug = "runbook-destroy-container-infrastructure"
                Octopus.Action.ProcessTemplate.Reference.VersioningOption = "AlwaysUseLatest"
                Octopus.Action.ProcessTemplate.Reference.VersionMask = "X"
                Octopus.Action.RunOnServer = "false"
                "Octopus.Step[Delete Kubernetes Namespace].Action[Delete Kubernetes Namespace].WorkerPoolVariable" = "Standards.Worker.Pool"
                "Octopus.Step[SQL Delete Database].Action[SQL Delete Database].Container" = "{\"FeedId\":null,\"Image\":null,\"GitUrl\":null,\"Dockerfile\":null}"
                "Octopus.Step[SQL Delete Database].Action[SQL Delete Database].Properties[Octopus.Action.RunOnServer]" = "true"
                "Octopus.Step[SQL Delete Database].Action[SQL Delete Database].WorkerPoolVariable" = "Project.Worker.Pool"
                Template.Kubernetes.Namespace.Name = "#{Standards.K8s.Namespace}"
            }
            worker_pool_variable = ""
        }
    }

    step "destroy-sql-infrastructure" {
        name = "Destroy SQL Infrastructure"

        action {
            action_type = "Octopus.ProcessTemplate"
            properties = {
                Octopus.Action.ProcessTemplate.Reference.Slug = "runbook-destroy-database-infrastructure"
                Octopus.Action.ProcessTemplate.Reference.VersionMask = "1.X"
                Octopus.Action.RunOnServer = "false"
                "Octopus.Step[SQL Delete Database].Action[SQL Delete Database].Container" = "{\"FeedId\":null,\"Image\":null,\"GitUrl\":null,\"Dockerfile\":null}"
                "Octopus.Step[SQL Delete Database].Action[SQL Delete Database].Properties[Octopus.Action.RunOnServer]" = "true"
                "Octopus.Step[SQL Delete Database].Action[SQL Delete Database].WorkerPoolVariable" = "Standards.Worker.Pool"
                Template.SQLServer.Database.Name = "#{Project.Database.Name}"
                Template.SQLServer.Name = "#{Project.SQLServer.Server.Name}"
                Template.SQLServer.User.Name = "#{Project.SQLServer.User.Name}"
                Template.SQLServer.User.Password = "#{Project.SQLServer.User.Password}"
            }
            worker_pool_variable = ""
        }
    }

    step "notify-team-of-runbook-status" {
        condition = "Always"
        name = "Notify Team of Runbook Status"

        action {
            notes = <<-EOT
                    **Always Runs**
                    
                    Sends a slack message to the teams so they know the status of the runbook run.
                    EOT
            properties = {
                Octopus.Action.Template.Id = "ActionTemplates-101"
                Octopus.Action.Template.Version = "15"
                OctopusUseBundledTooling = "False"
                ssn_Channel = "trident-status"
                ssn_Color = "#{unless Octopus.Deployment.Error}good#{else}danger#{/unless}"
                ssn_HookUrl = "#{Notification.Slack.Webhook.Url}"
                ssn_IconUrl = "https://octopus.com/content/resources/favicon.png"
                ssn_Message = "#{Notification.Body.Text}"
                ssn_Title = "#{Notification.RunbookStatus.Subject.Text}"
                ssn_Username = "Octopus Deploy"
            }
            worker_pool_variable = "Standards.Worker.Pool"
        }
    }
}