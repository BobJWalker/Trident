name = "🗄️ Run Adhoc Data Script"
default_guided_failure_mode = "EnvironmentDefault"
description = <<-EOT
        **Action**: Allows users to run an ad-hoc script to fix any data funk within the application.  All scripts are verified before running by checking the number of rows effected and the SQL Statements.
          
          **Affects**: The SQL Server this application is running on.
        EOT
environment_scope = "Specified"
environments = ["test", "staging", "production"]

connectivity_policy {
    allow_deployments_to_no_targets = true
}

run_retention_policy {
    quantity_to_keep = 5
}

process {
    step "send-email-confirmation-to-requester" {
        name = "Send Email Confirmation to Requester"

        action {
            action_type = "Octopus.Email"
            properties = {
                Octopus.Action.Email.Body = <<-EOT
                    Thank you for submitting a request to update #{Project.Database.Name} in #{Octopus.Environment.Name}.  The script you submitted was:
                    
                    #{Project.ScriptToRun.Text}
                    
                    This process will attempt to auto-approve the script.  This process will automatically notify you of any changes.
                    EOT
                Octopus.Action.Email.Subject = "AdHoc Data Change Script for #{Project.Database.Name} in #{Octopus.Environment.Name} has been submitted"
                Octopus.Action.Email.To = "#{Octopus.Deployment.CreatedBy.EmailAddress}"
            }
        }
    }

    step "check-script-for-auto-approval" {
        name = "Check Script For Auto Approval"

        action {
            action_type = "Octopus.Script"
            properties = {
                Octopus.Action.Script.ScriptBody = <<-EOT
                    $scriptToRun = $OctopusParameters["Project.ScriptToRun.Text"]
                    $commandsToLookFor = $OctopusParameters["SQLServer.Commands.Warnings"]
                    $databaseName = $OctopusParameters["Project.Database.Name"]
                    $databaseServer = $OctopusParameters["Project.Database.Server.Name"]
                    $connectionString = $OctopusParameters["Project.Connection.String"]
                    $environmentName = $OctopusParameters["Octopus.Environment.Name"]
                    
                    Write-Highlight "The script to run is:"
                    Write-Highlight "$scriptToRun"
                    
                    $approvalRequired = $false
                    $messages = ""
                    
                    Write-Highlight "Looping through the script to look for schema change commands"
                    $commandsToCheck = $CommandsToLookFor -split ","
                    foreach ($command in $commandsToCheck)
                    {
                    	Write-Host "Checking for command $command"
                        $foundCommand = $scriptToRun -match "$command"
                    
                        if ($foundCommand)
                        {
                        	$warningMessage = "A '$command' SQL Statement was found, approval by DBA is required."
                            $messages += $warningMessage + "`r`n"
                            Write-Highlight $warningMessage
                            $approvalRequired = $true        
                        }
                    }
                    
                    Write-Highlight "Attempting test run of script in a transaction"
                    $sqlConnection = New-Object System.Data.SqlClient.SqlConnection
                    $sqlConnection.ConnectionString = $connectionString
                    
                    $command = $sqlConnection.CreateCommand()
                    $command.CommandType = [System.Data.CommandType]'Text'
                    $command.CommandText = $scriptToRun
                    
                    Write-Host "Opening the connection to $databaseName"
                    
                    $sqlConnection.Open()   
                    
                    try
                    {
                    	Write-Host "Creating transaction"
                    	$command.Transaction = $sqlConnection.BeginTransaction()
                        
                        Write-Host "Running query now"
                    	$rowsChanged = $command.ExecuteNonQuery()
                    }
                    catch
                    {
                    	throw $_
                    }
                    finally 
                    {
                    	$command.Transaction.Rollback()
                    }
                    
                    if ($rowsChanged -gt 10)
                    {
                    	$warningMessage = "The number of rows which will changed is $rowsChanged, approval by DBA is required."
                        $messages += $warningMessage + "`r`n"
                        Write-Highlight $warningMessage
                        
                        $approvalRequired = $true
                    }
                    
                    if ($approvalRequired -eq $false)
                    {
                    	Write-Highlight "Script passes requirements, auto approving" 
                        $messageSubject = "No intervention required for script to be run on $databaseName in $environmentName"
                        $messageBody = "Script contained no schema change commands and will update between 1 and 10 rows of data"
                    }
                    else 
                    {
                    	$messageSubject = "DBA intervention required for script to be run on $databaseName in $environmentName"
                        $messageBody = $messages
                    }
                    
                    Set-OctopusVariable -name "ApprovalRequired" -value $approvalRequired
                    Set-OctopusVariable -name "MessageSubject" -value $messageSubject
                    Set-OctopusVariable -name "MessageBody" -value $messageBody
                    EOT
                Octopus.Action.Script.ScriptSource = "Inline"
                Octopus.Action.Script.Syntax = "PowerShell"
                OctopusUseBundledTooling = "False"
            }
            worker_pool = "hosted-ubuntu"

            container {
                feed = "dockerhub"
                image = "#{Project.ExecutionContainer.K8s}"
            }
        }
    }

    step "notify-requester-of-approval-status" {
        name = "Notify Requester of Approval Status"

        action {
            action_type = "Octopus.Email"
            properties = {
                Octopus.Action.Email.Body = "#{Octopus.Action[Check Script For Auto Approval].Output.MessageBody}"
                Octopus.Action.Email.Subject = "#{Octopus.Action[Check Script For Auto Approval].Output.MessageSubject}"
                Octopus.Action.Email.To = "#{Octopus.Deployment.CreatedBy.EmailAddress}"
            }
        }
    }

    step "notify-dbas-of-pending-changes" {
        condition = "Variable"
        name = "Notify DBAs of Pending Changes"
        properties = {
            Octopus.Step.ConditionVariableExpression = "#{Octopus.Action[Check Script For Auto Approval].Output.ApprovalRequired}"
        }
        start_trigger = "StartWithPrevious"

        action {
            environments = ["staging"]
            notes = ""
            properties = {
                Octopus.Action.Template.Id = "ActionTemplates-101"
                Octopus.Action.Template.Version = "15"
                ssn_Channel = "trident-approvals"
                ssn_Color = "warning"
                ssn_HookUrl = "#{Notification.Slack.Webhook.Url}"
                ssn_IconUrl = "https://octopus.com/content/resources/favicon.png"
                ssn_Message = "#{Notification.Body.Text}"
                ssn_Title = "#{Notification.ManualIntervention.Subject.Text}"
                ssn_Username = "Octopus Deploy"
            }
            worker_pool = "azure"
        }
    }

    step "dba-review-script" {
        condition = "Variable"
        name = "DBA Review Script"
        properties = {
            Octopus.Step.ConditionVariableExpression = "#{Octopus.Action[Check Script For Auto Approval].Output.ApprovalRequired}"
        }

        action {
            action_type = "Octopus.Manual"
            properties = {
                Octopus.Action.Manual.BlockConcurrentDeployments = "False"
                Octopus.Action.Manual.Instructions = <<-EOT
                    Please approve the following script to be run on the database #{Project.Database.Name} in #{Octopus.Environment.Name}
                    
                    #{Project.ScriptToRun.Text}
                    EOT
                Octopus.Action.Manual.ResponsibleTeamIds = "dba,global/octopus-managers"
            }
        }
    }

    step "run-adhoc-script" {
        name = "Run AdHoc Script"

        action {
            properties = {
                Adhoc.Database.Name = "#{Project.Database.Name}"
                Adhoc.Database.Password = "#{Project.Database.User.Password}"
                Adhoc.Database.Script = "#{Project.ScriptToRun.Text}"
                Adhoc.Database.Server = "#{Project.Database.Server.Name}"
                Adhoc.Database.UserName = "#{Project.Database.User.Name}"
                Octopus.Action.Template.Id = "ActionTemplates-383"
                Octopus.Action.Template.Version = "0"
                OctopusUseBundledTooling = "False"
            }
            worker_pool = "hosted-ubuntu"

            container {
                feed = "dockerhub"
                image = "#{Project.ExecutionContainer.K8s}"
            }
        }
    }

    step "notify-requester-of-result" {
        condition = "Always"
        name = "Notify Requester of Result"

        action {
            action_type = "Octopus.Email"
            properties = {
                Octopus.Action.Email.Body = <<-EOT
                    Thank you for submitting a request to update #{Project.Database.Name} in #{Octopus.Environment.Name}.  That following script has finished running.  The script you submitted was:
                    
                    #{Project.ScriptToRun.Text}
                    
                    The status was: #{Octopus.Step.Status.Error}
                    EOT
                Octopus.Action.Email.Subject = "AdHoc Data Change Script for #{Project.Database.Name} in #{Octopus.Environment.Name} has finished running"
                Octopus.Action.Email.To = "#{Octopus.Deployment.CreatedBy.EmailAddress}"
            }
        }
    }

    step "notify-dbas-of-finished-script" {
        condition = "Variable"
        name = "Notify DBAs of Finished Script"
        properties = {
            Octopus.Step.ConditionVariableExpression = "#{Project.Approval.Required}"
        }
        start_trigger = "StartWithPrevious"

        action {
            environments = ["staging"]
            notes = ""
            properties = {
                Octopus.Action.Template.Id = "ActionTemplates-101"
                Octopus.Action.Template.Version = "15"
                ssn_Channel = "trident-approvals"
                ssn_Color = "warning"
                ssn_HookUrl = "#{Notification.Slack.Webhook.Url}"
                ssn_IconUrl = "https://octopus.com/content/resources/favicon.png"
                ssn_Message = "#{Notification.Body.Text}"
                ssn_Title = "#{Notification.RunbookStatus.Subject.Text}"
                ssn_Username = "Octopus Deploy"
            }
            worker_pool = "azure"
        }
    }
}