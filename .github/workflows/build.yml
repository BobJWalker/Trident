name: Build CI

on:
  push:
    branches: 
      - main
      - 'feature/**'
      - 'features/**'
      - 'hotfix/**'
    paths:
      - 'src/**'
      - 'db/**'
      - 'k8s/**'
      - '.github/workflows/build.yml'      
  workflow_dispatch:      
jobs:
  prep:
    runs-on: ubuntu-latest
    name: Determine version
    outputs:       
      sem_ver: ${{ steps.determine_version.outputs.AssemblySemFileVer }}
    steps:      
      - name: Set environment variable based on branch
        id: set_env_var
        run: |
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_HEAD_REF: $GITHUB_HEAD_REF"
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "Branch detected: $BRANCH_NAME"
          
          if [ "$BRANCH_NAME" = "main" ]; then         
            echo "GIT_VERSION_INCREMENT=Patch" >> $GITHUB_ENV            
            echo "GIT_VERSION_MODE=ContinuousDeployment" >> $GITHUB_ENV 
            echo "GIT_VERSION_FORMAT={Major}.{Minor}.{Patch}" >> $GITHUB_ENV        
          else            
            echo "GIT_VERSION_INCREMENT=Patch" >> $GITHUB_ENV            
            echo "GIT_VERSION_MODE=ContinuousDelivery" >> $GITHUB_ENV
            echo "GIT_VERSION_FORMAT={Major}.{Minor}.{Patch}-{EscapedBranchName}.{CommitsSinceVersionSource}" >> $GITHUB_ENV
          fi
      - uses: actions/checkout@v1
        with:
          fetch-depth: '0'            
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v1
        with:
            versionSpec: 6.0.5
      - id: determine_version
        name: Determine Version
        uses: gittools/actions/gitversion/execute@v1
        with:
            additionalArguments: /overrideconfig assembly-file-versioning-format=${{ env.GIT_VERSION_FORMAT }} /overrideconfig increment=${{ env.GIT_VERSION_INCREMENT }} /overrideconfig mode=${{ env.GIT_VERSION_MODE }} /overrideconfig update-build-number=true
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: '0' 

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.x       

      - name: Install dependencies
        run: dotnet restore src/Trident.Database.DbUp/Trident.Database.DbUp.csproj

      - name: Run unit tests
        run: dotnet test src/Trident.Web.Test/Trident.Web.Test.csproj --configuration Release --collect "Code coverage" --logger trx --results-directory /tmp/testresults        
      - name: Attach test results as build artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            /tmp/testresults/*.trx

  scan:
    name: Scan Repo for Vulnerabilities
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner on repo
        uses: aquasecurity/trivy-action@0.32.0
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  build_and_publish_database: 
    name: Create and Publish Database
    outputs:       
      database_hash: ${{ steps.determine_database_hash.outputs.Database_Hash }}
    needs: [prep, test, scan]  
    runs-on: ubuntu-latest 
    permissions:
      # Add any additional permissions your job requires here
      id-token: write # This is required to obtain the OIDC Token for Octopus Deploy      
    steps:      
      - uses: actions/checkout@v1
        with:
          fetch-depth: '0'

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.x  
          
      - name: Install dependencies
        run: dotnet restore src/Trident.sln  

      - name: Create artifacts folder
        run: |
            mkdir "$GITHUB_WORKSPACE/artifacts"
            mkdir "$GITHUB_WORKSPACE/artifacts/Trident.Database.DbUp" 

      - name: Publish Database
        run: dotnet publish src/Trident.Database.DbUp/Trident.Database.DbUp.csproj --configuration Release --self-contained --output "$GITHUB_WORKSPACE/artifacts/Trident.Database.DbUp" -a "x64"                    
      - name: Package Database
        id: "database_package"
        uses: OctopusDeploy/create-zip-package-action@v3
        with:
          package_id: Trident.Database.DbUp
          version: "${{ needs.prep.outputs.sem_Ver }}"  
          base_path: "artifacts/Trident.Database.DbUp"          
          files: "**/*"
          output_folder: packaged                               
      
      - name: Create the Subject Checksum file for Attestation Build Provenance 
        id: determine_database_hash  
        shell: pwsh        
        run: |
          $packageHash = Get-FileHash -path "packaged/Trident.Database.DbUp.${{ needs.prep.outputs.sem_Ver }}.zip" -Algorithm SHA256
          $hashToSave = $packageHash.Hash 
          Write-Host "The database package hash is $hashToSave"
          
          "Database_Hash=$hashToSave" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
  
      - name: Login to Octopus Deploy 🐙
        uses: OctopusDeploy/login@v1
        with: 
          server: ${{ vars.OCTOPUS_SERVER_URL }}
          service_account_id: ${{ secrets.OCTOPUS_OIDC_SERVICE_ACCOUNT_ID }}
      - name: Push packages to Octopus 🐙
        uses: OctopusDeploy/push-package-action@v3
        with:
          server: ${{ vars.OCTOPUS_SERVER_URL }}
          space: ${{ vars.OCTOPUS_SPACE }}
          packages: |
            packaged/**/*.zip       
      - name: Push build information to Octopus 🐙
        uses: OctopusDeploy/push-build-information-action@v3
        with:
          packages: |          
            Trident.Database.DbUp                                
          version: "${{ needs.prep.outputs.sem_Ver }}"
          server: ${{ vars.OCTOPUS_SERVER_URL }}
          space: ${{ vars.OCTOPUS_SPACE }}  
  build_and_publish_website:
    name: Build, Scan, and Publish Website
    outputs:       
      website_hash: ${{ steps.push_docker_image.outputs.TRIDENT_DOCKER_SHA }}
    needs: [prep, test, scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: '0'

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.x  
          
      - name: Install dependencies
        run: dotnet restore src/Trident.sln  
    
      - name: build website container
        id: build_container
        working-directory: src
        run: | 
            docker build -f "./Trident.Web/Dockerfile"  --build-arg APP_VERSION=${{ needs.prep.outputs.sem_Ver }} --tag ${{ vars.DOCKER_HUB_REPO }}:${{ needs.prep.outputs.sem_Ver }} --tag ${{ vars.DOCKER_HUB_REPO }}:latest .                                               

      - name: Run Trivy vulnerability scanner on docker container
        uses: aquasecurity/trivy-action@0.32.0
        with:
          image-ref: '${{ vars.DOCKER_HUB_REPO }}:${{ needs.prep.outputs.sem_Ver }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:             
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PAT }}
      - name: push docker image
        working-directory: src
        id: push_docker_image
        run: |
            docker push ${{ vars.DOCKER_HUB_REPO }}:${{ needs.prep.outputs.sem_Ver }}
            docker push ${{ vars.DOCKER_HUB_REPO }}:latest

            dockerSha=$(docker manifest inspect ${{ vars.DOCKER_HUB_REPO }}:${{ needs.prep.outputs.sem_Ver }} -v | jq -r '.Descriptor.digest')
            echo "Docker sha is $dockerSha"            
            echo "TRIDENT_DOCKER_SHA=$dockerSha" >> $GITHUB_OUTPUT

  sbom_and_gh_release:  
    name: Generate SBOM, Attestations, and GitHub Release
    needs: [prep, test, scan, build_and_publish_website, build_and_publish_database]  
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      attestations: write # Required to publish attestations
    steps:      
      - uses: actions/checkout@v1
        with:
          fetch-depth: '0'  
            
      - name: Run Trivy in GitHub SBOM mode and submit results to Dependency Graph
        uses: aquasecurity/trivy-action@0.32.0
        with:
          scan-type: 'fs'
          format: 'github'
          output: 'dependency-results.sbom.json'
          scan-ref: '.'
          github-pat: ${{ secrets.GITHUB_TOKEN }} # or ${{ secrets.github_pat_name }} if you're using a PAT

      - name: Attach SBOM and package hash as build artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-sbom
          path: |
            dependency-results.sbom.json

      - name: Create the Subject Checksum file for Provenance        
        shell: pwsh        
        run: |          
          $cleanedPackageSha = $("${{ needs.build_and_publish_database.outputs.database_hash }}" -replace "sha256:", "").Trim()
          $cleanedImageSha = $("${{ needs.build_and_publish_website.outputs.website_hash }}" -replace "sha256:", "").Trim()

          $imageSubject = "${{ vars.DOCKER_HUB_REPO }}:${{ needs.prep.outputs.sem_Ver }}".Trim()
          $packageSubject = "Trident.Database.DbUp.${{ needs.prep.outputs.sem_Ver }}.zip".Trim()

          Write-Host "The website information is $cleanedImageSha  $imageSubject"
          Write-Host "The database information is $cleanedPackageSha  $packageSubject"

          $subjectText = @"
          $cleanedImageSha  $imageSubject
          $cleanedPackageSha  $packageSubject
          "@

          Write-Host "Creating the checksums file"
          New-Item -Path . -Name "subject.checksums.txt" -ItemType "File" -Value $subjectText      
      - name: Generate Attestation from Provenance
        uses: actions/attest-build-provenance@v2
        id: websiteattest
        with:
            subject-checksums: subject.checksums.txt

      - name: Create Release for GitHub
        id: create_release
        uses: ncipollo/release-action@v1 
        if: github.ref == 'refs/heads/main'       
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag: "${{ needs.prep.outputs.sem_Ver }}"
          name: Release ${{ needs.prep.outputs.sem_Ver }}
          body: |
            Automatic Release creation by GitHub Action
            Commit Message: ${{ github.event.head_commit.message }}
          draft: false           

  octopus_deploy:  
    name: Handover to Octopus Deploy
    needs: [prep, test, scan, build_and_publish_website, build_and_publish_database, sbom_and_gh_release]  
    runs-on: ubuntu-latest
    permissions:
      # Add any additional permissions your job requires here
      id-token: write # This is required to obtain the OIDC Token for Octopus Deploy 
    steps:
      - name: Login to Octopus Deploy 🐙
        uses: OctopusDeploy/login@v1
        with: 
          server: ${{ vars.OCTOPUS_SERVER_URL }}
          service_account_id: ${{ secrets.OCTOPUS_OIDC_SERVICE_ACCOUNT_ID }}         
      - name: Create and deploy release in Octopus 🐙
        uses: OctopusDeploy/create-release-action@v3
        with:
          server: ${{ vars.OCTOPUS_SERVER_URL }}
          space: ${{ vars.OCTOPUS_SPACE }}
          project: ${{ vars.OCTOPUS_PROJECT_NAME }}
          channel: ${{ github.ref == 'refs/heads/main' && vars.OCTOPUS_RELEASE_CHANNEL || vars.OCTOPUS_FEATURE_BRANCH_CHANNEL }}
          package_version: "${{ needs.prep.outputs.sem_Ver }}" 
          release_number: "${{ needs.prep.outputs.sem_Ver }}"          
          git_ref: ${{ (github.ref_type == 'tag' && github.event.repository.default_branch ) || (github.head_ref || github.ref) }}
          git_commit: ${{ github.event.after || github.event.pull_request.head.sha }} 
      
      
