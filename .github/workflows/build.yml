name: Build CI

on:
  push:
    branches: 
      - main
      - 'feature/**'
      - 'features/**'
      - 'hotfix/**'
    paths:
      - 'src/**'
      - 'db/**'
      - 'k8s/**'
      - '.github/workflows/build.yml'
      - 'scripts/**'
      - 'gitversion.yml'
  workflow_dispatch:      
env:    
  OCTOPUS_PROJECT_NAME: ${{ vars.OCTOPUS_PROJECT_NAME }}      
  OCTOPUS_SPACE: ${{ vars.OCTOPUS_SPACE }}   
  OCTOPUS_URL: ${{ vars.OCTOPUS_SERVER_URL }}
  DOCKER_REPO: ${{ vars.DOCKER_HUB_REPO }}
jobs:
  build_and_deploy:    
    runs-on: ubuntu-latest 
    permissions:
      # Add any additional permissions your job requires here
      id-token: write # This is required to obtain the OIDC Token for Octopus Deploy
      contents: write # This is required to push the version file changes back to the repo
    steps:      
      - name: Set environment variable based on branch
        id: set_env_var
        run: |
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_HEAD_REF: $GITHUB_HEAD_REF"
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "Branch detected: $BRANCH_NAME"
          
          if [ "$BRANCH_NAME" = "main" ]; then
            echo "OCTOPUS_CHANNEL=${{ vars.OCTOPUS_RELEASE_CHANNEL }}" >> $GITHUB_ENV            
            echo "GIT_VERSION_INCREMENT=Patch" >> $GITHUB_ENV
            echo "GIT_VERSION_MODE=ContinuousDeployment" >> $GITHUB_ENV 
            echo "GIT_VERSION_FORMAT={Major}.{Minor}.{Patch}" >> $GITHUB_ENV        
          else
            echo "OCTOPUS_CHANNEL=${{ vars.OCTOPUS_FEATURE_BRANCH_CHANNEL }}" >> $GITHUB_ENV            
            echo "GIT_VERSION_INCREMENT=None" >> $GITHUB_ENV
            echo "GIT_VERSION_MODE=ContinuousDelivery" >> $GITHUB_ENV
            echo "GIT_VERSION_FORMAT={Major}.{Minor}-{PreReleaseLabel}.{CommitsSinceVersionSource}" >> $GITHUB_ENV
          fi
      - uses: actions/checkout@v1
        with:
          fetch-depth: '0'            
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v1
        with:
            versionSpec: 6.0.5
      - id: determine_version
        name: Determine Version
        uses: gittools/actions/gitversion/execute@v1
        with:
            additionalArguments: /overrideconfig assembly-file-versioning-format=${{ env.GIT_VERSION_FORMAT }} /overrideconfig increment=${{ env.GIT_VERSION_INCREMENT }} /overrideconfig mode=${{ env.GIT_VERSION_MODE }} /overrideconfig update-build-number=true
      
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}  
          
      - name: Install dependencies
        run: dotnet restore src/Trident.sln 
        
      - name: Run unit tests
        run: dotnet test src/Trident.Web.Test/Trident.Web.Test.csproj --configuration Release --collect "Code coverage" --logger trx --results-directory /tmp/testresults      
      - name: Upload unit tests results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: /tmp/testresults

      - name: Create artifacts folder
        run: |
            mkdir "$GITHUB_WORKSPACE/artifacts"
            mkdir "$GITHUB_WORKSPACE/artifacts/Trident.Database.DbUp" 

      - name: Publish Database
        run: dotnet publish src/Trident.Database.DbUp/Trident.Database.DbUp.csproj --configuration Release --self-contained --output "$GITHUB_WORKSPACE/artifacts/Trident.Database.DbUp" -a "x64"                    
      - name: package database
        id: "database_package"
        uses: OctopusDeploy/create-zip-package-action@v3
        with:
          package_id: Trident.Database.DbUp
          version: "${{ steps.determine_version.outputs.AssemblySemFileVer }}"  
          base_path: "artifacts/Trident.Database.DbUp"          
          files: "**/*"
          output_folder: packaged

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:             
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PAT }}      
      - name: install buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1        
      - name: build and push website container
        id: build_and_push_container
        working-directory: src
        run: | 
            docker buildx build --push --platform linux/amd64,linux/arm64 -f "./Trident.Web/Dockerfile"  --build-arg APP_VERSION=${{ steps.determine_version.outputs.AssemblySemFileVer }} --tag ${{ env.DOCKER_REPO }}:${{ steps.determine_version.outputs.AssemblySemFileVer }} --tag ${{ env.DOCKER_REPO }}:latest .                                               
            tridentSha=$(docker buildx imagetools inspect "${{ env.DOCKER_REPO }}:latest" --format "{{json .Manifest}}" | jq -r .digest)
            echo "TRIDENT_DOCKER_SHA=$tridentSha" >> $GITHUB_ENV

      - name: get database package hash
        id: get-db-package-hash
        uses: seepine/hash-files@v1
        with: 
          patterns: "packaged/Trident.Database.DbUp.${{ steps.determine_version.outputs.AssemblySemFileVer }}.zip"

      - name: update version file with latest version
        uses: mikefarah/yq@master              
        with:
          cmd: |
            cat <<EOF > packagehashes.yaml
            tridentWebSiteSha: "${{env.TRIDENT_DOCKER_SHA}}"
            EOF

            yq -i '.tridentDbUpPackageHash = "${{ steps.get-db-package-hash.outputs.hash }}"' 'packagehashes.yaml'

            yq -i '.latestVersion = "${{ steps.determine_version.outputs.AssemblySemFileVer }}"' 'version.yml' 
            yq -i '.runNumber = "${{ github.run_number }}"' 'version.yml'

      - name: Generate SBOM
        id: gensbom
        uses: advanced-security/generate-sbom-action@v1
      - name: package sbom
        id: "package_sbom"
        uses: OctopusDeploy/create-zip-package-action@v3
        with:
          package_id: Trident.Artifact.SBOM
          version: "${{ steps.determine_version.outputs.AssemblySemFileVer }}"  
          base_path: "./"          
          files: |
            ${{ steps.gensbom.outputs.fileName }}
            packagehashes.yaml
          output_folder: packaged

      - name: Create Release for GitHub
        id: create_release
        uses: ncipollo/release-action@v1
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag: "${{ steps.determine_version.outputs.AssemblySemFileVer }}"
          name: Release ${{ steps.determine_version.outputs.AssemblySemFileVer }}
          body: |
            Automatic Release creation by GitHub Action
            Commit Message: ${{ github.event.head_commit.message }}
          draft: false          
          artifacts: "${{ steps.gensbom.outputs.fileName }},$GITHUB_WORKSPACE/packaged/*.zip,/tmp/testresults/*.trx"      
            
      - id: commit_file_change
        name: commit file change
        run : |
          git config --global user.name '${{ github.actor }}'
          git config --global user.email '${{ github.actor }}@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY                

          git checkout "${GITHUB_REF:11}" 
          git stage 'version.yml'
          git commit -am "TRID-18: Updating previous version to ${{ steps.determine_version.outputs.AssemblySemFileVer }} and run number to ${{ github.run_number }}"
          git push --set-upstream origin ${GITHUB_REF:11} 

      - name: Login to Octopus Deploy 
        uses: OctopusDeploy/login@v1
        with: 
          server: ${{ env.OCTOPUS_URL }}
          service_account_id: ${{ secrets.OCTOPUS_OIDC_SERVICE_ACCOUNT_ID }}
      - name: push packages to Octopus
        uses: OctopusDeploy/push-package-action@v3
        with:
          packages: |
            packaged/**/*.zip 
      
      - name: push build information to Octopus
        uses: OctopusDeploy/push-build-information-action@v3
        with:
          packages: |   
            ${{ env.DOCKER_REPO }}         
            Trident.Database.DbUp 
            Trident.Artifact.SBOM                    
          version: "${{ steps.determine_version.outputs.AssemblySemFileVer }}"         

      - name: create release in Octopus
        uses: OctopusDeploy/create-release-action@v3
        with:
          project: ${{ env.OCTOPUS_PROJECT_NAME }}
          channel: ${{ env.OCTOPUS_CHANNEL }}
          package_version: "${{ steps.determine_version.outputs.AssemblySemFileVer }}" 
          release_number: "${{ steps.determine_version.outputs.AssemblySemFileVer }}"          
          git_ref: ${{ (github.ref_type == 'tag' && github.event.repository.default_branch ) || (github.head_ref || github.ref) }}
          git_commit: ${{ github.event.after || github.event.pull_request.head.sha }} 
