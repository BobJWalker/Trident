name: Spin the Version Number

on:
    workflow_dispatch:
    ##schedule:
    ##- cron: '*/45 0-2,13-23 * * 1-5'
jobs:
    Update_Version:
        runs-on: ubuntu-latest                
        steps:
            - uses: actions/checkout@v1
              with:
                fetch-depth: '0'            
            - uses: actions/checkout@v1
              with:
                fetch-depth: '0'
            - name: Check_for_pending_manual_interventions
              shell: pwsh
              run: |
                $instanceURL = '${{ vars.OCTOPUS_SERVER_URL }}'
                $apiKey = '${{ secrets.OCTOPUSSERVERAPIKEY }} '
                $spaceName = '${{ vars.OCTOPUS_SPACE }}'

                $header = @{ "X-Octopus-ApiKey" = $apiKey }

                Write-Host "Pulling Octopus Space and Project information for $spaceName"
                $space = (Invoke-RestMethod -Method Get -Uri "$instanceURL/api/spaces/all" -Headers $header) | Where-Object {$_.Name -eq $spaceName}
                $pendingTasks = Invoke-RestMethod -Method Get -Uri "$instanceURL/api/$($space.Id)/interruptions?pendingOnly=True" -Headers $header

                Write-Host "Found $($pendingTasks.Items.Count) awaiting manual intervention."
                
                $currentDate = [DateTime]::UtcNow
                Write-Host "The current date is $currentDate"
                
                foreach ($task in $pendingTasks.Items)
                {
                    Write-Host "The pending task is $($task.Id) created at $($task.Created)"
                    $timeWaiting = $currentDate - $task.Created
                    Write-Host "Task $($task.Id) has been waiting for $($timeWaiting.TotalMinutes) minutes"
                
                    if ($timeWaiting.TotalMinutes -ge 15)
                    {
                        Write-Host "The task has been waiting for approval for over 15 minutes.  Approving it now."
                
                        $body = @{
                            Instructions= $null
                            Notes = "Auto-Approving because it was pending for over 15 minutes"
                            Result = "Proceed"  
                        } | ConvertTo-Json
                
                        # Take responsibility for the Intervention
                        Invoke-RestMethod "$instanceURL/api/$($space.Id)/interruptions/$($task.Id)/responsible" -Method Put -Headers $header
                
                        #Approve/abort the intervention
                        Invoke-RestMethod "$instanceURL/api/$($space.Id)/interruptions/$($task.Id)/submit" -Body $body -Method Post -Headers $header
                    }
                    else
                    {
                        Write-Host "The task has not been waiting for approval for 15 minutes yet.  Skipping approval."
                    }
                }
            - name: Check_for_existing_releases
              shell: pwsh
              run: |
                $instanceURL = '${{ vars.OCTOPUS_SERVER_URL }}'
                $apiKey = '${{ secrets.OCTOPUSSERVERAPIKEY }} '
                $spaceName = '${{ vars.OCTOPUS_SPACE }}'
                $projectName = '${{ vars.OCTOPUS_PROJECT_NAME }}'                

                $stagingEnvironmentName = 'Staging'

                $header = @{ "X-Octopus-ApiKey" = $apiKey }

                Write-Host "Pulling Octopus Space and Project information for $projectName in $spaceName"
                $space = (Invoke-RestMethod -Method Get -Uri "$instanceURL/api/spaces/all" -Headers $header) | Where-Object {$_.Name -eq $spaceName}
                $project = (Invoke-RestMethod -Method Get -Uri "$instanceURL/api/$($space.Id)/projects/all" -Headers $header) | Where-Object {$_.Name -eq $projectName}

                Write-Host "Pulling Octopus Progression information for $projectName in $spaceName"
                $progessionResults = (Invoke-RestMethod "$($instanceURL)/api/$($space.Id)/projects/$($Project.id)/progression" -Method Get -Headers $header)

                Write-Host "Getting environment information for $stagingEnvironmentName"                
                $stagingEnvironment = $progessionResults.Environments | Where-Object {$_.Name -eq $stagingEnvironmentName}
                
                $createNewRelease = $true

                foreach ($release in $progessionResults.Releases)
                {
                    Write-Host "Checking release $($release.Release.Version) for $projectName in $spaceName"
                    if ($release.Channel.Name -ne "Release")
                    {
                        Write-Host "Skipping release $($release.Release.Version) because it is not a Release channel"
                        continue
                    }

                    Write-Host "Checking the next deployments for $($release.Release.Version)"    
                    foreach ($nextDeploymentId in $release.NextDeployments)
                    {
                        if ($nextDeploymentId -eq $stagingEnvironment.Id)
                        {
                            Write-Host "Staging environment is the next deployment for $($release.Release.Version)"
                            $createNewRelease = $false
                        }
                    }

                    if ($createNewRelease -eq $false)
                    {
                        Write-Host "Found a release that is ready to deploy to Staging.  Stopping the check."
                        break
                    }
                }

                $eventName = '${{github.event_name}}'
                if ($createNewRelease -eq $false -and $eventName -ne 'workflow_dispatch')
                {
                  gh run cancel ${{ github.run_id }}
                  gh run watch ${{ github.run_id }}
                }
                elseif ($createNewRelease -eq $false -and $eventName -eq 'workflow_dispatch')
                {
                  Write-Host "This is a manual run.  Skipping the check for existing releases."                  
                }
                else
                {
                  Write-Host "No releases are ready to deploy to Staging.  Proceeding with the workflow."
                }
              env:
                GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                OCTOPUS_PROJECT_NAME: ${{ vars.OCTOPUS_PROJECT_NAME }}  
                OCTOPUS_SPACE: ${{ vars.OCTOPUS_SPACE }}
                OCTOPUS_API_KEY: ${{ secrets.OCTOPUSSERVERAPIKEY }}  
                OCTOPUS_URL: ${{ vars.OCTOPUS_SERVER_URL }}  
            - name: Install GitVersion
              uses: gittools/actions/gitversion/setup@v1
              with:
                  versionSpec: 6.x
            - id: determine_version
              name: Determine Version
              uses: gittools/actions/gitversion/execute@v1
              with:
                  additionalArguments: /config gitversion.yml
            - name: update version file with latest version
              uses: mikefarah/yq@master              
              with:
                cmd: yq -i '.runNumber = "${{ steps.determine_version.outputs.FullSemVer }}"' 'version.yml' 
            - name: update version file with latest run number
              uses: mikefarah/yq@master              
              with:
                cmd: yq -i '.runNumber = "${{ github.run_number }}"' 'version.yml'              
            - id: commit_file_change
              name: commit file change
              run : |
                git config --global user.name '${{ github.actor }}'
                git config --global user.email '${{ github.actor }}@users.noreply.github.com'
                git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY                

                git checkout "${GITHUB_REF:11}" 
                git stage 'version.yml'
                git commit -am "Updating prvious version to ${{ steps.determine_version.outputs.FullSemVer }} and run number to ${{ github.run_number }}"
                git push --set-upstream origin ${GITHUB_REF:11}                  
